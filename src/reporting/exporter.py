# src/reporting/exporter.py
from pptx import Presentation
from pptx.util import Inches, Pt
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage, ListFlowable, ListItem
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import letter
from pathlib import Path
from typing import Dict, Any

def export_to_ppt(report: Dict[str, Any], chart_paths: Dict[str, str], dest: str = "reports/final_report.pptx"):
    """
    Export AI-generated report (slides + narrative) to PowerPoint.
    """
    Path(dest).parent.mkdir(parents=True, exist_ok=True)
    prs = Presentation()

    # Iterate over slides generated by AI
    for slide_data in report.get("slides", []):
        layout = prs.slide_layouts[1] if slide_data.get("bullets") else prs.slide_layouts[0]
        slide = prs.slides.add_slide(layout)

        # Title
        slide.shapes.title.text = slide_data.get("title", "Untitled Slide")

        # Bullets
        if "bullets" in slide_data:
            tx = slide.placeholders[1].text_frame
            tx.clear()
            for bullet in slide_data["bullets"]:
                p = tx.add_paragraph()
                p.text = bullet
                p.level = 0

    # Add charts as image-only slides
    for name, path in chart_paths.items():
        if Path(path).exists():
            slide = prs.slides.add_slide(prs.slide_layouts[5])  # blank slide
            slide.shapes.title.text = name
            left = Inches(0.5)
            top = Inches(1)
            width = Inches(8)
            slide.shapes.add_picture(str(path), left, top, width=width)

    prs.save(dest)
    return dest


def export_to_pdf(report: Dict[str, Any], chart_paths: Dict[str, str], dest: str = "reports/final_report.pdf"):
    """
    Export AI-generated report (slides + narrative) to PDF.
    """
    Path(dest).parent.mkdir(parents=True, exist_ok=True)
    doc = SimpleDocTemplate(dest, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []

    # Title
    story.append(Paragraph("Ad Campaign A/B Analysis", styles['Title']))
    story.append(Spacer(1, 12))

    # Narrative (full AI text if available)
    story.append(Paragraph("<b>Full Narrative Report</b>", styles['Heading2']))
    for para in report.get("narrative", "").split("\n"):
        if para.strip():
            story.append(Paragraph(para.strip(), styles['BodyText']))
            story.append(Spacer(1, 6))

    # Slide bullets (as appendix in PDF)
    story.append(Spacer(1, 12))
    story.append(Paragraph("<b>Slide Summary</b>", styles['Heading2']))
    for slide_data in report.get("slides", []):
        story.append(Paragraph(slide_data.get("title", "Untitled Slide"), styles['Heading3']))
        if slide_data.get("bullets"):
            bullet_list = ListFlowable(
                [ListItem(Paragraph(b, styles['Normal'])) for b in slide_data["bullets"]],
                bulletType='bullet'
            )
            story.append(bullet_list)
        story.append(Spacer(1, 10))

    # Charts
    story.append(Spacer(1, 12))
    story.append(Paragraph("<b>Charts</b>", styles['Heading2']))
    for name, path in chart_paths.items():
        if Path(path).exists():
            story.append(Spacer(1, 6))
            try:
                img = RLImage(str(path))
                img.drawHeight = 4 * 72
                img.drawWidth = 6 * 72
                story.append(img)
                story.append(Paragraph(name, styles['Caption']))
            except Exception as e:
                story.append(Paragraph(f"Could not embed chart {path}: {e}", styles['BodyText']))

    doc.build(story)
    return dest

