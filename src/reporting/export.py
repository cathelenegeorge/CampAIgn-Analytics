# src/reporting/exporter.py
from __future__ import annotations

from pathlib import Path
from typing import Dict, Any, Tuple

from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.shapes import MSO_SHAPE
from pptx.enum.text import PP_ALIGN

from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Image as RLImage,
    ListFlowable, ListItem, KeepTogether, PageBreak
)
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors

# Optional: use Pillow to read image size for better scaling
try:
    from PIL import Image as PILImage
except Exception:  # Pillow not installed
    PILImage = None


# -------------- Helpers --------------

def _img_size_pixels(img_path: Path) -> Tuple[int, int] | None:
    if PILImage is None:
        return None
    try:
        with PILImage.open(img_path) as im:
            return im.size  # (width_px, height_px)
    except Exception:
        return None

def _scale_to_fit(w_px: int, h_px: int, max_w_in: float, max_h_in: float, dpi: int = 96) -> Tuple[float, float]:
    """
    Scale pixel image to fit within max inches, preserving aspect ratio.
    Default DPI 96 (common for screen charts).
    Returns (width_in, height_in).
    """
    w_in = w_px / dpi
    h_in = h_px / dpi
    scale = min(max_w_in / w_in, max_h_in / h_in, 1.0)
    return w_in * scale, h_in * scale


# -------------- PowerPoint Export --------------

def export_to_ppt(report: Dict[str, Any], chart_paths: Dict[str, str], dest: str = "reports/final_report.pptx"):
    """
    Export AI-generated report (slides + narrative) to PowerPoint.
    - Adds text slides from 'report["slides"]'
    - Appends one image-only slide per chart in 'chart_paths'
    """
    dest_path = Path(dest)
    dest_path.parent.mkdir(parents=True, exist_ok=True)
    prs = Presentation()

    # Slide 1: Title
    title_slide = prs.slides.add_slide(prs.slide_layouts[0])
    title_slide.shapes.title.text = report.get("title", "Ad Campaign A/B Analysis")
    subtitle = title_slide.placeholders[1].text_frame
    subtitle.clear()
    p = subtitle.paragraphs[0]
    p.text = report.get("subtitle", "Automated KPI, stats tests, and insights")
    p.font.size = Pt(14)

    # Narrative bullets / slides generated by AI
    for slide_data in report.get("slides", []):
        layout = prs.slide_layouts[1] if slide_data.get("bullets") else prs.slide_layouts[5]  # 1: title+content, 5: title-only
        slide = prs.slides.add_slide(layout)
        slide.shapes.title.text = slide_data.get("title", "Untitled Slide")
        if slide_data.get("bullets"):
            tf = slide.placeholders[1].text_frame
            tf.clear()
            for i, bullet in enumerate(slide_data["bullets"]):
                para = tf.add_paragraph() if i > 0 else tf.paragraphs[0]
                para.text = bullet
                para.level = 0

    # Chart slides (Title Only layout so we have a title placeholder)
    for name, path in chart_paths.items():
        p = Path(path)
        if not p.exists():
            # Add a text-only slide noting missing asset
            slide = prs.slides.add_slide(prs.slide_layouts[5])
            slide.shapes.title.text = name
            tb = slide.shapes.add_textbox(Inches(1), Inches(2.5), Inches(8), Inches(1))
            tf = tb.text_frame
            tf.text = f"[Missing chart file] {p}"
            continue

        slide = prs.slides.add_slide(prs.slide_layouts[5])  # Title Only
        slide.shapes.title.text = name

        # Compute size to fit within slide
        slide_w = prs.slide_width      # EMU
        slide_h = prs.slide_height     # EMU
        max_w_in = 10.0                # leave margins
        max_h_in = 5.6                 # keep under title area

        size_px = _img_size_pixels(p)
        if size_px:
            w_in, h_in = _scale_to_fit(size_px[0], size_px[1], max_w_in, max_h_in, dpi=96)
        else:
            # Fallback fixed size if Pillow isn't available
            w_in, h_in = 9.5, 5.3

        # Center the picture
        left = Inches((max(0.0, (slide_w / 914400)) - w_in) / 2.0)  # 914400 EMU = 1 inch
        top = Inches(1.2 + (max_h_in - h_in) / 2.0)

        slide.shapes.add_picture(str(p), left, top, width=Inches(w_in), height=Inches(h_in))

    prs.save(dest)
    return dest


# -------------- PDF Export (ReportLab) --------------

def export_to_pdf(report: Dict[str, Any], chart_paths: Dict[str, str], dest: str = "reports/final_report.pdf"):
    """
    Export AI-generated report (narrative + slides summary + charts) to PDF via ReportLab.
    - Creates/ensures a 'Caption' style
    - Scales images to fit page while preserving aspect ratio
    """
    dest_path = Path(dest)
    dest_path.parent.mkdir(parents=True, exist_ok=True)

    doc = SimpleDocTemplate(str(dest_path), pagesize=letter, rightMargin=36, leftMargin=36, topMargin=36, bottomMargin=36)
    styles = getSampleStyleSheet()

    # Ensure we have a 'Caption' style (safe default)
    if "Caption" not in styles:
        styles.add(ParagraphStyle(
            name="Caption",
            parent=styles["BodyText"],
            fontSize=9,
            textColor=colors.grey,
            alignment=1,  # center
            spaceBefore=4,
            spaceAfter=8
        ))

    story = []

    # Title
    story.append(Paragraph(report.get("title", "Ad Campaign A/B Analysis"), styles["Title"]))
    story.append(Spacer(1, 12))

    # Narrative
    narrative = report.get("narrative", "").strip()
    if narrative:
        story.append(Paragraph("<b>Executive Summary</b>", styles["Heading2"]))
        for para in narrative.split("\n"):
            if para.strip():
                story.append(Paragraph(para.strip(), styles["BodyText"]))
                story.append(Spacer(1, 6))

    # Slide bullets (appendix)
    slides = report.get("slides", [])
    if slides:
        story.append(Spacer(1, 12))
        story.append(Paragraph("<b>Slide Summary</b>", styles["Heading2"]))
        for slide_data in slides:
            story.append(Paragraph(slide_data.get("title", "Untitled Slide"), styles["Heading3"]))
            bullets = slide_data.get("bullets") or []
            if bullets:
                bullet_list = ListFlowable(
                    [ListItem(Paragraph(b, styles["Normal"])) for b in bullets],
                    bulletType="bullet",
                    leftIndent=18
                )
                story.append(bullet_list)
            story.append(Spacer(1, 8))

    # Charts section
    if chart_paths:
        story.append(PageBreak())
        story.append(Paragraph("<b>Charts</b>", styles["Heading2"]))
        story.append(Spacer(1, 6))

        max_w_in, max_h_in = 6.5, 4.6  # safe printable area
        for name, path in chart_paths.items():
            p = Path(path)
            if not p.exists():
                story.append(Paragraph(f"[Missing chart file] {p}", styles["BodyText"]))
                story.append(Spacer(1, 6))
                continue

            # Read size and scale
            w_in, h_in = 6.0, 4.0
            size_px = _img_size_pixels(p)
            if size_px:
                w_in, h_in = _scale_to_fit(size_px[0], size_px[1], max_w_in, max_h_in, dpi=96)

            img = RLImage(str(p), width=w_in * 72, height=h_in * 72)  # 72 pt = 1 inch
            caption = Paragraph(name, styles["Caption"])

            # Keep image+caption together
            story.append(KeepTogether([img, caption]))
            story.append(Spacer(1, 12))

    doc.build(story)
    return dest
